generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String
  name          String
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  bookings Booking[]
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationTokens")
}

model Barbershop {
  id          String   @id @default(uuid())
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  services BarbershopService[]

  @@map("barbershops")
}

model BarbershopService {
  id           String  @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal @db.Decimal(10, 2)
  barbershopId String

  barbershop Barbershop @relation(fields: [barbershopId], references: [id])
  bookings   Booking[]

  @@map("barbershopServices")
}

model Booking {
  id        String   @id @default(uuid())
  userId    String
  serviceId String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User              @relation(fields: [userId], references: [id])
  service BarbershopService @relation(fields: [serviceId], references: [id])

  @@map("bookings")
}
